name: Remote Access

on:
  workflow_dispatch:
    inputs:
      os:
        description: 'Operating System'
        required: false
        default: 'both'
        type: choice
        options:
        - windows
        - linux
        - both

jobs:
  remote-access:
    strategy:
      matrix:
        os: ${{ github.event.inputs.os == 'windows' && fromJSON('["windows-latest"]') || github.event.inputs.os == 'linux' && fromJSON('["ubuntu-latest"]') || fromJSON('["windows-latest", "ubuntu-latest"]') }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 3600

    steps:
      - name: Configure Core RDP Settings (Windows)
        if: runner.os == 'Windows'
        run: |
          # Enable Remote Desktop and disable Network Level Authentication (if needed)
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' `
                             -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                             -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                             -Name "SecurityLayer" -Value 0 -Force

          # Remove any existing rule with the same name to avoid duplication
          netsh advfirewall firewall delete rule name="RDP-Tailscale"
          
          # For testing, allow any incoming connection on port 3389
          netsh advfirewall firewall add rule name="RDP-Tailscale" `
            dir=in action=allow protocol=TCP localport=3389

          # (Optional) Restart the Remote Desktop service to ensure changes take effect
          Restart-Service -Name TermService -Force

      - name: Create RDP User with Secure Password (Windows)
        if: runner.os == 'Windows'
        run: |
          Add-Type -AssemblyName System.Security
          $charSet = @{
              Upper   = [char[]](65..90)      # A-Z
              Lower   = [char[]](97..122)     # a-z
              Number  = [char[]](48..57)      # 0-9
              Special = ([char[]](33..47) + [char[]](58..64) +
                         [char[]](91..96) + [char[]](123..126)) # Special characters
          }
          $rawPassword = @()
          $rawPassword += $charSet.Upper | Get-Random -Count 4
          $rawPassword += $charSet.Lower | Get-Random -Count 4
          $rawPassword += $charSet.Number | Get-Random -Count 4
          $rawPassword += $charSet.Special | Get-Random -Count 4
          $password = -join ($rawPassword | Sort-Object { Get-Random })
          $securePass = ConvertTo-SecureString $password -AsPlainText -Force
          New-LocalUser -Name "RDP" -Password $securePass -AccountNeverExpires
          Add-LocalGroupMember -Group "Administrators" -Member "RDP"
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member "RDP"
          
          echo "RDP_CREDS=User: RDP | Password: $password" >> $env:GITHUB_ENV
          
          if (-not (Get-LocalUser -Name "RDP")) {
              Write-Error "User creation failed"
              exit 1
          }

      - name: Install Tailscale (Windows)
        if: runner.os == 'Windows'
        run: |
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
          $installerPath = "$env:TEMP\tailscale.msi"
          
          Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
          Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
          Remove-Item $installerPath -Force

      - name: Establish Tailscale Connection (Windows)
        if: runner.os == 'Windows'
        run: |
          # Bring up Tailscale with the provided auth key and set a unique hostname
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname=gh-runner-$env:GITHUB_RUN_ID
          
          # Wait for Tailscale to assign an IP
          $tsIP = $null
          $retries = 0
          while (-not $tsIP -and $retries -lt 10) {
              $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4
              Start-Sleep -Seconds 5
              $retries++
          }
          
          if (-not $tsIP) {
              Write-Error "Tailscale IP not assigned. Exiting."
              exit 1
          }
          echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV
      
      - name: Verify RDP Accessibility (Windows)
        if: runner.os == 'Windows'
        run: |
          Write-Host "Tailscale IP: $env:TAILSCALE_IP"
          
          # Test connectivity using Test-NetConnection against the Tailscale IP on port 3389
          $testResult = Test-NetConnection -ComputerName $env:TAILSCALE_IP -Port 3389
          if (-not $testResult.TcpTestSucceeded) {
              Write-Error "TCP connection to RDP port 3389 failed"
              exit 1
          }
          Write-Host "TCP connectivity successful!"

      - name: Maintain Connection (Windows)
        if: runner.os == 'Windows'
        run: |
          Write-Host "`n=== RDP ACCESS ==="
          Write-Host "Address: $env:TAILSCALE_IP"
          Write-Host "Username: RDP"
          Write-Host "Password: $(echo $env:RDP_CREDS)"
          Write-Host "==================`n"
          
          # Keep runner active indefinitely (or until manually cancelled)
          while ($true) {
              Write-Host "[$(Get-Date)] RDP Active - Use Ctrl+C in workflow to terminate"
              Start-Sleep -Seconds 300
          }

      - name: Install VNC Server and Desktop Environment (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y ubuntu-desktop-minimal xfce4 xfce4-goodies tightvncserver
          sudo apt-get install -y openssh-server

      - name: Configure VNC Server (Linux)
        if: runner.os == 'Linux'
        run: |
          # Generate a secure password for VNC
          VNC_PASSWORD=$(openssl rand -base64 12 | tr -d "=+/" | cut -c1-8)
          echo "VNC_PASSWORD=${VNC_PASSWORD}" >> $GITHUB_ENV
          
          # Set up VNC password
          mkdir -p ~/.vnc
          echo "${VNC_PASSWORD}" | vncpasswd -f > ~/.vnc/passwd
          chmod 600 ~/.vnc/passwd
          
          # Create VNC startup script
          cat > ~/.vnc/xstartup << 'EOF'
          #!/bin/bash
          xrdb $HOME/.Xresources
          startxfce4 &
          EOF
          chmod +x ~/.vnc/xstartup
          
          # Start VNC server
          vncserver :1 -geometry 1920x1080 -depth 24

      - name: Configure SSH (Linux)
        if: runner.os == 'Linux'
        run: |
          # Generate a secure password for SSH user
          SSH_PASSWORD=$(openssl rand -base64 16 | tr -d "=+/" | cut -c1-12)
          echo "SSH_PASSWORD=${SSH_PASSWORD}" >> $GITHUB_ENV
          
          # Create user for remote access
          sudo useradd -m -s /bin/bash remoteuser
          echo "remoteuser:${SSH_PASSWORD}" | sudo chpasswd
          sudo usermod -aG sudo remoteuser
          
          # Configure SSH
          sudo systemctl enable ssh
          sudo systemctl start ssh
          
          # Allow password authentication
          sudo sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/g' /etc/ssh/sshd_config
          sudo systemctl restart ssh

      - name: Install Tailscale (Linux)
        if: runner.os == 'Linux'
        run: |
          curl -fsSL https://tailscale.com/install.sh | sh

      - name: Establish Tailscale Connection (Linux)
        if: runner.os == 'Linux'
        run: |
          # Bring up Tailscale with the provided auth key and set a unique hostname
          sudo tailscale up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname=gh-runner-linux-$GITHUB_RUN_ID
          
          # Wait for Tailscale to assign an IP
          TAILSCALE_IP=""
          for i in {1..10}; do
              TAILSCALE_IP=$(tailscale ip -4 2>/dev/null || echo "")
              if [[ -n "$TAILSCALE_IP" ]]; then
                  break
              fi
              sleep 5
          done
          
          if [[ -z "$TAILSCALE_IP" ]]; then
              echo "Tailscale IP not assigned. Exiting."
              exit 1
          fi
          echo "TAILSCALE_IP=${TAILSCALE_IP}" >> $GITHUB_ENV

      - name: Verify Remote Access (Linux)
        if: runner.os == 'Linux'
        run: |
          echo "Tailscale IP: $TAILSCALE_IP"
          
          # Test SSH connectivity
          timeout 10 bash -c "echo > /dev/tcp/$TAILSCALE_IP/22" && echo "SSH (port 22) is accessible" || echo "SSH port test failed"
          
          # Test VNC connectivity
          timeout 10 bash -c "echo > /dev/tcp/$TAILSCALE_IP/5901" && echo "VNC (port 5901) is accessible" || echo "VNC port test failed"

      - name: Maintain Connection (Linux)
        if: runner.os == 'Linux'
        run: |
          echo ""
          echo "=== LINUX REMOTE ACCESS ==="
          echo "Tailscale IP: $TAILSCALE_IP"
          echo ""
          echo "SSH Access:"
          echo "  ssh remoteuser@$TAILSCALE_IP"
          echo "  Password: $SSH_PASSWORD"
          echo ""
          echo "VNC Access:"
          echo "  VNC Server: $TAILSCALE_IP:5901"
          echo "  Password: $VNC_PASSWORD"
          echo "  (Use any VNC client like RealVNC, TightVNC, etc.)"
          echo ""
          echo "Desktop Environment: XFCE4"
          echo "=========================="
          echo ""
          
          # Keep runner active indefinitely (or until manually cancelled)
          while true; do
              echo "[$(date)] Linux Remote Access Active - Use Ctrl+C in workflow to terminate"
              sleep 300
          done
